#!/bin/bash

# ‚ñë‚ñà‚ñÄ‚ñÄ‚ñë‚ñà‚ñÄ‚ñà‚ñë‚ñà‚ñë‚ñà‚ñë‚ñà‚ñÄ‚ñà‚ñë‚ñà‚ñÄ‚ñà‚ñë‚ñà‚ñë‚ñà‚ñë‚ñà‚ñÄ‚ñÑ‚ñë‚ñà‚ñë‚ñà‚ñë‚ñà‚ñë‚ñà
# ‚ñë‚ñà‚ñë‚ñë‚ñë‚ñà‚ñë‚ñà‚ñë‚ñà‚ñÄ‚ñÑ‚ñë‚ñà‚ñë‚ñà‚ñë‚ñà‚ñë‚ñà‚ñë‚ñë‚ñà‚ñë‚ñà‚ñë‚ñà‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñà‚ñë‚ñà
# ‚ñë‚ñÄ‚ñÄ‚ñÄ‚ñë‚ñÄ‚ñÄ‚ñÄ‚ñë‚ñÄ‚ñë‚ñÄ‚ñë‚ñÄ‚ñë‚ñÄ‚ñë‚ñÄ‚ñÄ‚ñÄ‚ñë‚ñë‚ñÄ‚ñë‚ñÄ‚ñë‚ñÄ‚ñÄ‚ñÄ‚ñë‚ñë‚ñÄ‚ñë‚ñë‚ñë‚ñÄ‚ñë

# ‚úÖ Nom du module √† packager
MODULE="exploit_sys.py"

# ‚úÖ Nom du binaire de sortie
OUTPUT_NAME="exploit_sys_linux"

# ‚úÖ R√©pertoire du projet
PROJECT_ROOT=$(dirname "$(dirname "$(realpath "$0")")")

# ‚úÖ Dossier de sortie
DIST_DIR="$PROJECT_ROOT/outputs/builds/linux"
mkdir -p "$DIST_DIR"

echo "üì¶ Compilation du module $MODULE..."

# ‚úÖ Nettoyage ancien build (optionnel)
rm -rf "$PROJECT_ROOT/build/__pycache__"
rm -rf "$PROJECT_ROOT/$OUTPUT_NAME" 2>/dev/null

# ‚úÖ Compilation avec PyInstaller
pyinstaller \
    --onefile \
    --name "$OUTPUT_NAME" \
    --distpath "$DIST_DIR" \
    --workpath "$PROJECT_ROOT/build/temp" \
    --specpath "$PROJECT_ROOT/build/specs" \
    "$PROJECT_ROOT/modules/$MODULE"

# ‚úÖ V√©rification du binaire
if [[ -f "$DIST_DIR/$OUTPUT_NAME" ]]; then
    echo "‚úÖ Binaire compil√© avec succ√®s : $DIST_DIR/$OUTPUT_NAME"
else
    echo "‚ùå √âchec de la compilation"
    exit 1
fi
